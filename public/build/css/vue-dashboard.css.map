{"version":3,"sources":["webpack:///./resources/assets/js/vue-components/resources/assets/js/vue-components/DataTable.vue","webpack:///./resources/assets/js/vue-components/Dashboard/resources/assets/js/vue-components/Dashboard/FlaggedEvaluationControls.vue"],"names":[],"mappings":";AAiKA;CACA;CACA;AAEA;AACA;EACA;CACA;CACA;;ACzFA;CACA;CACA","file":"../css/vue-dashboard.css","sourcesContent":["<template>\n\t<div class=\"table-responsive\">\n\t\t<div class=\"refresh-button-container\" v-if=\"canReload\">\n\t\t\t<button type=\"button\" class=\"btn btn-default\" title=\"Reload table\"\n\t\t\t\t\t@click=\"reloadTable\">\n\t\t\t\t<span class=\"glyphicon glyphicon-refresh\"></span>\n\t\t\t</button>\n\t\t</div>\n\n\t\t<table :id=\"id\" class=\"table\" :class=\"tableClass\" width=\"100%\" ref=\"table\">\n\t\t\t<slot>\n\t\t\t\t<thead>\n\t\t\t\t\t<tr v-for=\"(row, rowIndex) of thead\" :key=\"`row-${rowIndex}`\">\n\t\t\t\t\t\t<th v-for=\"(th, thIndex) of row\" :key=\"thIndex\"\n\t\t\t\t\t\t\t\t:rowspan=\"th.rowspan\"\n\t\t\t\t\t\t\t\t:colspan=\"th.colspan\">\n\t\t\t\t\t\t\t{{ th.text || th }}\n\t\t\t\t\t\t</th>\n\t\t\t\t\t</tr>\n\t\t\t\t</thead>\n\t\t\t</slot>\n\t\t</table>\n\t\t<div v-if=\"exportable && data && data.length > 0\" class=\"text-center\">\n\t\t\t<button type=\"button\" class=\"btn btn-default\"\n\t\t\t\t\t@click=\"exportCsv\">\n\t\t\t\tExport CSV\n\t\t\t</button>\n\t\t</div>\n\t</div>\n</template>\n\n<script>\nimport download from 'downloadjs';\n\nimport { csvHeader } from '@/modules/report-utils.js';\nimport { escapeCsv, sortIgnoreCase } from '@/modules/utils.js';\n\nexport default {\n\tprops: {\n\t\tid: {\n\t\t\ttype: String,\n\t\t\trequired: false\n\t\t},\n\t\tstriped: {\n\t\t\ttype: Boolean,\n\t\t\tdefault: true\n\t\t},\n\t\tbordered: {\n\t\t\ttype: Boolean,\n\t\t\tdefault: false\n\t\t},\n\n\t\tthead: {\n\t\t\ttype: Array,\n\t\t\trequired: false\n\t\t},\n\t\tconfig: {\n\t\t\ttype: Object,\n\t\t\trequired: false\n\t\t},\n\t\tdata: {\n\t\t\ttype: Array,\n\t\t\trequired: false\n\t\t},\n\n\t\treloadable: {\n\t\t\ttype: Boolean,\n\t\t\tdefault: false\n\t\t},\n\t\texportable: {\n\t\t\ttype: Boolean,\n\t\t\tdefault: false\n\t\t},\n\t\texportFilename: {\n\t\t\ttype: String,\n\t\t\tdefault(){\n\t\t\t\treturn `Table Export ${new Date().toLocaleString()}`;\n\t\t\t}\n\t\t}\n\t},\n\tdata(){\n\t\treturn {\n\t\t\tupdateData: false\n\t\t};\n\t},\n\tmounted(){\n\t\t$(this.$refs.table).DataTable(Object.assign({}, this.config, {data: this.data}));\n\t},\n\tcomputed: {\n\t\ttableClass(){\n\t\t\treturn {\n\t\t\t\t'table-striped': this.striped,\n\t\t\t\t'table-bordered': this.bordered\n\t\t\t};\n\t\t},\n\t\tcanReload(){\n\t\t\treturn (this.config && 'ajax' in this.config) || this.reloadable;\n\t\t}\n\t},\n\twatch: {\n\t\tconfig(){\n\t\t\tlet config = Object.assign({destroy: true}, this.config, {data: this.data});\n\t\t\t$(this.$refs.table).DataTable(config);\n\t\t},\n\t\tdata(data){\n\t\t\tthis.updateData = true;\n\t\t\tthis.$nextTick(() => {\n\t\t\t\t// only set data if table not already recreated with new data\n\t\t\t\tif(this.updateData){\n\t\t\t\t\t$(this.$refs.table).DataTable({\n\t\t\t\t\t\tretrieve: true\n\t\t\t\t\t}).clear().rows.add(data).draw();\n\t\t\t\t\tthis.updateData = false;\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t},\n\tmethods: {\n\t\treloadTable(){\n\t\t\tif (!this.canReload)\n\t\t\t\treturn;\n\n\t\t\tif (this.config && 'ajax' in this.config)\n\t\t\t\t$(this.$refs.table).DataTable({\n\t\t\t\t\tretrieve: true\n\t\t\t\t}).ajax.reload(null, false);\n\t\t\telse\n\t\t\t\tthis.$emit('reload');\n\t\t},\n\t\texportCsv(){\n\t\t\tif (!this.exportable)\n\t\t\t\treturn;\n\n\t\t\tlet header = csvHeader(this.thead);\n\t\t\tlet rows = this.data.map(row =>\n\t\t\t\trow.map(cell =>\n\t\t\t\t\tescapeCsv(cell.toString())\n\t\t\t\t).join(',')\n\t\t\t).sort(sortIgnoreCase);\n\t\t\tlet table = header.concat(rows);\n\t\t\tdownload(table.join('\\n'), `${this.exportFilename}.csv`, 'text/csv');\n\t\t}\n\t},\n\tbeforeUpdate(){\n\t\t$(this.$refs.table).DataTable({\n\t\t\tretrieve: true\n\t\t}).clear().destroy();\n\t\tthis.updateData = false;\n\t},\n\tupdated(){\n\t\t$(this.$refs.table).DataTable(Object.assign({}, this.config, {data: this.data}));\n\t},\n\tbeforeDestroy(){\n\t\t$(this.$refs.table).DataTable({\n\t\t\tretrieve: true\n\t\t}).clear().destroy();\n\t}\n};\n</script>\n\n<style scoped>\n\t.refresh-button-container {\n\t\ttext-align: right;\n\t}\n\n\t@media print {\n\t\t.refresh-button-container {\n\t\t\tdisplay: none;\n\t\t}\n\t}\n</style>\n\n\n\n// WEBPACK FOOTER //\n// ./resources/assets/js/vue-components/resources/assets/js/vue-components/DataTable.vue?a7abc4e2","<template>\n\t<td>\n\t\t<confirmation-button v-if=\"cancellable\" class=\"btn btn-xs btn-warning\"\n\t\t\t\t@click=\"cancelRequest\">\n\t\t\t<span class=\"glyphicon glyphicon-remove\"></span>\n\t\t\tCancel request\n\t\t</confirmation-button>\n\t\t<confirmation-button class=\"btn btn-xs btn-primary\"\n\t\t\t\t@click=\"handleComplete\">\n\t\t\t<span class=\"glyphicon glyphicon-ok\"></span>\n\t\t\tComplete\n\t\t</confirmation-button>\n\t</td>\n</template>\n\n<script>\nimport ConfirmationButton from '@/vue-components/ConfirmationButton.vue';\n\nimport { emitError } from '@/modules/errors.js';\nimport {\n\tfetchConfig,\n\tokOrThrow\n} from '@/modules/utils.js';\n\nexport default {\n\tprops: {\n\t\tflaggedEval: {\n\t\t\ttype: Object,\n\t\t\trequired: true\n\t\t}\n\t},\n\n\tcomputed: {\n\t\tcancellable() {\n\t\t\treturn (\n\t\t\t\tthis.flaggedEval.requested_action === 'delete'\n\t\t\t\t&& this.flaggedEval.evaluation.status === 'pending'\n\t\t\t);\n\t\t}\n\t},\n\n\tmethods: {\n\t\tcancelRequest() {\n\t\t\tif (!this.cancellable)\n\t\t\t\treturn;\n\n\t\t\tfetch(`/evaluations/${this.flaggedEval.evaluation.id}/cancel`, {\n\t\t\t\t...fetchConfig(),\n\t\t\t\tmethod: 'POST', // PATCH\n\t\t\t\tbody: JSON.stringify({\n\t\t\t\t\t_method: 'PATCH'\n\t\t\t\t})\n\t\t\t}).then(okOrThrow).then(() => {\n\t\t\t\tthis.handleComplete();\n\t\t\t}).catch(err => {\n\t\t\t\temitError(err, this, 'There was a problem cancelling the evaluation request');\n\t\t\t});\n\t\t},\n\t\thandleComplete() {\n\t\t\tfetch(`/flagged_evaluations/${this.flaggedEval.id}`, {\n\t\t\t\t...fetchConfig(),\n\t\t\t\tmethod: 'POST', // DELETE\n\t\t\t\tbody: JSON.stringify({\n\t\t\t\t\t_method: 'DELETE'\n\t\t\t\t})\n\t\t\t}).then(okOrThrow).then(() => {\n\t\t\t\tthis.$emit('remove');\n\t\t\t}).catch(err => {\n\t\t\t\temitError(err, this, 'There was a problem completing the flagged evaluation');\n\t\t\t});\n\t\t}\n\t},\n\n\tcomponents: {\n\t\tConfirmationButton\n\t}\n};\n</script>\n\n<style scoped>\n\ttd .btn {\n\t\tmargin: 0.25em;\n\t}\n</style>\n\n\n\n// WEBPACK FOOTER //\n// ./resources/assets/js/vue-components/Dashboard/resources/assets/js/vue-components/Dashboard/FlaggedEvaluationControls.vue?409cff80"],"sourceRoot":""}