extend type Query @middleware(checks: ["auth", "type:admin", "site-feature:faculty_merit"]) {
	usersWithMerits(
		form_id: ID
		period_start: String
		period_end: String
		after: Date
		before: Date
		status: MeritReportStatus
	): [User!]!
    meritReports(
		form_id: ID @eq
        user_id: ID @eq
		period_start: String @eq
		period_end: String @eq
		after: Date @where(key: "period_end", operator: ">=")
        before: Date @where(key: "period_start", operator: "<=")
		status: MeritReportStatus @eq
		exceptStatus: MeritReportStatus = DISABLED @neq(key: "status")
    ): [MeritReport!]! @all

	meritReportForms: [MeritReportForm!]! @all
}

extend type Mutation @middleware(checks: ["auth", "type:admin", "site-feature:faculty_merit"]) {
	createUserMerit(
		user_id: ID!
		form_id: ID!
		period_start: Date!
		period_end: Date!
		notes: String
		status: MeritReportStatus
	): MeritReport @create

	updateUserMerit(
		id: ID!
		user_id: ID
		form_id: ID
		period_start: Date
		period_end: Date
		notes: String
		status: MeritReportStatus
	): MeritReport @update
}

extend type Query @middleware(checks: ["auth", "site-feature:faculty_merit"]) {
	meritReport(id: ID! @eq): MeritReport @find
	meritReportForm(id: ID! @eq): MeritReportForm @find
	facultyMeritChecklistForm: MeritReportForm
}

extend type Mutation @middleware(checks: ["auth", "type:faculty", "site-feature:faculty_merit"]) {
	createMyMeritChecklist: MeritReport
}

type MeritReport {
	id: ID!
	user_id: ID!
	user: User! @belongsTo
	form_id: ID!
	form: MeritReportForm! @belongsTo
	period_start: Date!
	period_end: Date!
	status: MeritReportStatus
	report: Mixed!
	notes: String
	title: String
    slug: String
	created_at: DateTime!
	updated_at: DateTime!

	publications: [Publication]!
    studies: [Study]!
    grants: [Grant]!
	pubMedIds: [ID]
	conferencePresentations: Int
	otherPresentations: Int
	chaptersTextbooks: Int
	numGrants: Int
	leadershipRole: Boolean
	teachingFormalCourses: Boolean

	leadershipRoles: [LeadershipRole]
	leadershipPositions: Int
	participatesInSimulation: Boolean
	nationalBoards: [NationalBoardRole]
	committeeParticipation: [OrganizationCommitteeItem]
	committees: [CommitteeItem]
	directorships: Directorships
	interviews: [DatedEvent]

	certifications: [Certification]
	organizations: [String]

	nihStudySectionMember: Boolean
	editorialBoards: [EditorialBoardItem]
	lectures: [Lecture]!
}

type Certification {
	board: String!
	specialty: String
	current: Boolean
	recertified: String
}

type LeadershipRole {
	roleType: String
	roles: [String]
}

enum MeritReportStatus {
	COMPLETE
	PENDING
	OPEN
	DISABLED
}

type MeritReportForm {
	id: ID!
	name: String!
	version: Int!
	form: Mixed!
	created_at: Date!
	updated_at: Date!
	deleted_at: Date
	report_slug: String
}

type DatedEvent {
	description: String!
	date: String!
}

type Publication {
	publicationType: String,
	title: String
	author: String
	link: String
	role: String

	pmid: ID @field(resolver: "App\\Http\\GraphQL\\Queries\\MeritReporter@publicationPmid")
}

type Study {
    title: String
    role: String
    yearInitiated: String
    approvalNumber: String
    progress: String
}

enum GrantType {
    EXISTING
    NEW
}

type Grant {
    type: GrantType!
    agency: String
    project: String
    amount: Float
}

type NationalBoardRole {
    name: String
    role: String
}

type OrganizationCommitteeItem {
    organization: String
    organizationType: OrganizationType
    committees: [CommitteeItem]
}

type CommitteeItem {
    name: String
    role: CommitteeRole
    organizationType: OrganizationType
    meetingsPerYear: Int
}

enum OrganizationType {
    INTERNAL
    REGIONAL
    NATIONAL
}

enum CommitteeRole {
    CHAIR @enum(value: "chair")
    MEMBER @enum(value: "member")
}

type EditorialBoardItem {
    journal: String
    role: String
}

type Directorships {
    clinicalService: [String]
    simulationCenter: [String]
    visitingRotators: [String]
}

type Lecture {
    lectureType: String
    title: String
    date: String
    audience: String
}

# type MeritReportContents {
# 	pages: [MeritSection!]!
# }
#
# type MeritSection {
# 	title: String
# 	items: [MeritObject!]!
# }
#
# union MeritObject = MeritSection | MeritItem | MeritInstruction
#
# type MeritInstruction {
# 	text: String
# }
#
# type MeritItem {
# 	text: String!
# 	checked: Boolean
# 	subjectReadonly: Boolean
# 	questions: [QuestionnaireQuestion!]!
# 	scoring: QuestionnaireScoringDefinition
# }
