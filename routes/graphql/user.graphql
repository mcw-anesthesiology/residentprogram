# @format

extend type Query @middleware(checks: ["auth", "type:admin"]) {
	users(
		id: [ID!] @in
		type: UserType @eq
		training_level: TrainingLevel @eq
		secondary_training_level: String @eq
		status: UserStatus @eq
		inGroups: [ID!]
			@builder(method: "App\\Http\\GraphQL\\Builders\\User@inGroups")
		orderBy: [OrderByClause!] @orderBy
	): [User!]! @all(model: "App\\User")
	user(id: ID! @eq): User @find(model: "App\\User")
	roles: [Role]! @all

	userTypeGroups: [UserTypeGroup]!

	userGroups: [UserGroup!]! @all(model: "App\\UserGroup")
}

extend type Mutation @middleware(checks: ["auth", "type:admin"]) {
	createUser(name: String!, email: String! @rules(apply: ["email"])): User
		@create
	updateUser(
		id: ID!
		name: String
		email: String @rules(apply: ["email"])
	): User @update
	deleteUser(id: ID!): User @delete

	setUserMeritAdministratees(user_id: ID!, administratee_ids: [ID!]!): User
	grantUserRole(
		user_id: ID!
		role: Role!
		additional_permissions: Mixed
	): User

	createMentorship(
		mentor_id: ID!
		mentee_id: ID!
		status: ActiveStatus = active
	): Mentorship @create
	deleteMentorship(id: ID!): Mentorship @delete

	createUserGroup(
		name: String!
	): UserGroup @create
	updateUserGroup(
		id: ID!
		name: String
	): UserGroup @update
	addUserToGroup(
		group_id: ID!
		user_id: ID!
	): UserGroup @field(resolver: "App\\Http\\GraphQL\\Mutations\\UserGroup@addUserToGroup")
	removeUserFromGroup(
		group_id: ID!
		user_id: ID!
	): UserGroup @field(resolver: "App\\Http\\GraphQL\\Mutations\\UserGroup@removeUserFromGroup")

}

type UserTypeGroup {
	type: SpecificType!
	users: [User!]!
}

type UserGroup {
	id: ID!
	name: String!
	users: [User!] @belongsToMany
}

enum UserType {
	TRAINEE @enum(value: "resident")
	FACULTY @enum(value: "faculty")
	ADMIN @enum(value: "admin")
	APP @enum(value: "app")
	STAFF @enum(value: "staff")
	EXTERNAL @enum(value: "external")
}

enum SpecificType {
	RESIDENT @enum(value: "resident")
	FELLOW @enum(value: "fellow")
	FACULTY @enum(value: "faculty")
	ADMIN @enum(value: "admin")
	APP @enum(value: "app")
	STAFF @enum(value: "staff")
	EXTERNAL @enum(value: "external")
}

enum TrainingLevel {
	INTERN @enum(value: "intern")
	CA1 @enum(value: "ca-1")
	CA2 @enum(value: "ca-2")
	CA3 @enum(value: "ca-3")
	FELLOW @enum(value: "fellow")
	RESIDENCY_DIRECTOR @enum(value: "residency-director")
}

enum ReminderFrequency {
	NONE @enum(value: "none")
	DAILY @enum(value: "daily")
	WEEKLY @enum(value: "weekly")
	BIWEEKLY @enum(value: "biweekly")
}

enum YesNoBoolean {
	YES @enum(value: "yes")
	NO @enum(value: "no")
}

enum UserStatus {
	ACTIVE @enum(value: "active")
	INACTIVE @enum(value: "inactive")
	EXTERNAL @enum(value: "external")
	PENDING @enum(value: "pending")
}

type UserRole {
	role: Role!
	pivot: UserRolePivot
}

type UserRolePivot {
	additional_permissions: Mixed
}

enum Role {
	MANAGE_BEYOND_MILESTONES
}

type User {
	id: ID!
	username: String!
	email: String!
	first_name: String!
	last_name: String!
	full_name: String!
	type: UserType!
	specific_type: SpecificType!
	status: UserStatus!
	training_level: TrainingLevel
	secondary_training_level: String
	notifications: YesNoBoolean!
	reminder_frequency: ReminderFrequency!
	remind_only_if_pending: YesNoBoolean!
	photo_path: String
	roles: [UserRole]!

	groups: [UserGroup!] @belongsToMany

	meritReports(
		form_id: ID @eq
		period_start: String @eq
		period_end: String @eq
		after: Date @where(key: "period_end", operator: ">=")
		before: Date @where(key: "period_start", operator: "<=")
		status: MeritReportStatus @eq
		exceptStatus: MeritReportStatus = DISABLED @neq(key: "status")
		orderBy: [OrderByClause!] @orderBy
	): [MeritReport]! @hasMany

	meritAdministrators: [User] @belongsTo
	meritAdministratees: [User] @belongsTo

	evaluatorEvaluations(
		after: Date @where(key: "evaluation_date_end", operator: ">=")
		before: Date @where(key: "evaluation_date_start", operator: "<=")
		completedBetween: DateRange @whereBetween(key: "complete_date")
		requestedBetween: DateRange @whereBetween(key: "request_date")
		status: EvaluationStatus @eq
		type: EvaluationType
		subjectFilter: UserFilter
			@builder(
				method: "App\\Http\\GraphQL\\Builders\\Evaluation@subjectFilter"
			)
		orderBy: [OrderByClause!] @orderBy
	): [Evaluation]! @hasMany
	subjectEvaluations(
		after: Date @where(key: "evaluation_date_end", operator: ">=")
		before: Date @where(key: "evaluation_date_start", operator: "<=")
		completedBetween: DateRange @whereBetween(key: "complete_date")
		requestedBetween: DateRange @whereBetween(key: "request_date")
		status: EvaluationStatus @eq
		type: EvaluationType
		orderBy: [OrderByClause!] @orderBy
	): [Evaluation]! @hasMany
	requestedEvaluations(
		after: Date @where(key: "evaluation_date_end", operator: ">=")
		before: Date @where(key: "evaluation_date_start", operator: "<=")
		completedBetween: DateRange @whereBetween(key: "complete_date")
		requestedBetween: DateRange @whereBetween(key: "request_date")
		status: EvaluationStatus @eq
		type: EvaluationType
		subjectFilter: UserFilter
			@builder(
				method: "App\\Http\\GraphQL\\Builders\\Evaluation@subjectFilter"
			)
		orderBy: [OrderByClause!] @orderBy
	): [Evaluation]! @hasMany

	mentees: [User]! @belongsToMany
	mentors: [User]! @belongsToMany
	mentorships: [Mentorship]! @hasMany
	menteeships: [Mentorship]! @hasMany

	created_at: DateTime!
	updated_at: DateTime!
}

input UserInput {
	username: String!
	email: String! @rules(apply: ["email"])
	first_name: String!
	last_name: String!
	training_level: TrainingLevel
	secondary_training_level: String
	status: UserStatus!
}

type Mentorship {
	id: ID!
	mentor_id: ID!
	mentor: User! @belongsTo
	mentee_id: ID!
	mentee: User! @belongsTo
	status: ActiveStatus
}

enum ActiveStatus {
	active
	inactive
}
