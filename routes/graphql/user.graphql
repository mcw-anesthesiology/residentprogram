extend type Query @middleware(checks: ["auth", "type:admin"]) {
	users(
		type: UserType @eq
		status: UserStatus @eq
		type: UserType @eq
	): [User!]! @all(model: "App\\User")
    user(id: ID! @eq): User @find(model: "App\\User")
	roles: [Role]! @all

	userGroups: [UserGroup]!
}

extend type Mutation @middleware(checks: ["auth", "type:admin"]) {
    createUser(
        name: String!
        email: String! @rules(apply: ["email"])
    ): User @create
    updateUser(
        id: ID!
        name: String
        email: String @rules(apply: ["email"])
    ): User @update
    deleteUser(
        id: ID!
    ): User @delete

	setUserMeritAdministratees(
		user_id: ID!
		administratee_ids: [ID!]!
	): User
	grantUserRole(
		user_id: ID!
		role: Role!
		additional_permissions: Mixed
	): User
}

type UserGroup {
	type: SpecificType!
	users: [User!]!
}

enum UserType {
	TRAINEE @enum(value: "resident")
	FACULTY @enum(value: "faculty")
	ADMIN @enum(value: "admin")
	APP @enum(value: "app")
	STAFF @enum(value: "staff")
	EXTERNAL @enum(value: "external")
}

enum SpecificType {
	RESIDENT @enum(value: "resident")
	FELLOW @enum(value: "fellow")
	FACULTY @enum(value: "faculty")
	ADMIN @enum(value: "admin")
	APP @enum(value: "app")
	STAFF @enum(value: "staff")
	EXTERNAL @enum(value: "external")
}

enum TrainingLevel {
	INTERN @enum(value: "intern")
	CA1 @enum(value: "ca-1")
	CA2 @enum(value: "ca-2")
	CA3 @enum(value: "ca-3")
	FELLOW @enum(value: "fellow")
	RESIDENCY_DIRECTOR @enum(value: "residency-director")
}

enum ReminderFrequency {
	NONE @enum(value: "none")
	DAILY @enum(value: "daily")
	WEEKLY @enum(value: "weekly")
	BIWEEKLY @enum(value: "biweekly")
}

enum YesNoBoolean {
	YES @enum(value: "yes")
	NO @enum(value: "no")
}

enum UserStatus {
	ACTIVE @enum(value: "active")
	INACTIVE @enum(value: "inactive")
	EXTERNAL @enum(value: "external")
}

type UserRole {
	role: Role!
	pivot: UserRolePivot
}

type UserRolePivot {
	additional_permissions: Mixed
}

enum Role {
	MANAGE_BEYOND_MILESTONES
}

type User {
    id: ID!
    username: String!
	email: String!
	first_name: String!
	last_name: String!
	full_name: String!
	type: UserType!
	specific_type: SpecificType!
	status: UserStatus!
	training_level: TrainingLevel
	secondary_training_level: String
	notifications: YesNoBoolean!
	reminder_frequency: ReminderFrequency!
	remind_only_if_pending: YesNoBoolean!
	photo_path: String
	roles: [UserRole]!

	meritReports(
		form_id: ID @eq
		period_start: String @eq
		period_end: String @eq
		status: MeritReportStatus @eq
	): [MeritReport]! @hasMany

	meritAdministrators: [User] @belongsTo
	meritAdministratees: [User] @belongsTo

    created_at: DateTime!
    updated_at: DateTime!
}

input UserInput {
	username: String!
	email: String! @rules(apply: ["email"])
	first_name: String!
	last_name: String!
	training_level: TrainingLevel
	secondary_training_level: String
	status: UserStatus!
}
