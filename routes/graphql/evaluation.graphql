# @format

extend type Query @middleware(checks: ["auth"]) {
	evaluations(
		completedBetween: DateRange @whereBetween(key: "complete_date")
		requestedBetween: DateRange @whereBetween(key: "request_date")
		after: Date @where(key: "evaluation_date_end", operator: ">=")
		before: Date @where(key: "evaluation_date_start", operator: "<=")
		subjectFilter: UserFilter
			@builder(
				method: "App\\Http\\GraphQL\\Builders\\Evaluation@subjectFilter"
			)
		orderBy: [OrderByClause!] @orderBy
	): [Evaluation!]! @all(model: "App\\Evaluation")
	evaluation(id: ID! @eq): Evaluation @find(model: "App\\Evaluation")

	response(id: ID! @eq): [Response!]! @find(model: "App\\Response")

	responseSummary(
		formId: ID!
		questionId: ID!
		subjectId: ID!
		after: Date
		before: Date
	): ResponseSummary

	textResponseSummary(
		formId: ID!
		questionId: ID!
		subjectId: ID!
		after: Date
		before: Date
	): TextResponseSummary
}

extend type User {
	subjectResponseSummary(
		formId: ID!
		questionId: ID!
		after: Date
		before: Date
	): ResponseSummary
		@field(
			resolver: "App\\Http\\GraphQL\\Queries\\ResponseSummary@resolveSubject"
		)

	subjectTextResponseSummary(
		formId: ID!
		questionId: ID!
		after: Date
		before: Date
	): TextResponseSummary
		@field(
			resolver: "App\\Http\\GraphQL\\Queries\\TextResponseSummary@resolveSubject"
		)
}

extend type Mutation @middleware(checks: ["auth"]) {
	saveEvaluation(
		id: ID!
		responses: [ResponseInput!]
		complete: Boolean
	): Evaluation

	updateEvaluationComment(id: ID!, comment: String): Evaluation
}

extend type Mutation @middleware(checks: ["auth", "type:admin"]) {
	updateEvaluation(id: ID!, visibility: Visibility): Evaluation

	updateEvaluationVisibilities(
		startDate: Date!
		endDate: Date!
		formId: ID!
		visibility: Visibility
	): [Evaluation]!
}

type Evaluation {
	id: ID!

	form_id: ID!
	form: Form

	evaluator_id: ID
	evaluator: User @belongsTo

	subject_id: ID
	subject: User @belongsTo

	requested_by_id: ID
	requestor: User @belongsTo

	status: String # FIXME: Make enum
	type: EvaluationType
	training_level: TrainingLevel
	visibility: Visibility

	request_date: DateTime
	complete_date: DateTime
	evaluation_date_start: DateTime
	evaluation_date_end: DateTime
	archive_date: DateTime

	seen_by_subject_at: DateTime
	seen_by_evaluator_at: DateTime

	unseen_by_subject: Boolean
	unseen_by_evaluator: Boolean

	request_ip: String
	complete_ip: String

	hash_expires: DateTime

	request_note: String
	comment: String

	responses: [Response]! @hasMany
	textResponses: [TextResponse]! @hasMany

	contents: Mixed
}

enum EvaluationType {
	faculty
	trainee
	fellow
	intern
	app
	self
}

enum EvaluationStatus {
	complete
	pending
}

type TextResponse {
	id: ID!
	evaluation_id: ID!
	evaluation: Evaluation @belongsTo
	question_id: ID
	response: String
}

type Response {
	id: ID!
	evaluation_id: ID!
	evaluation: Evaluation @belongsTo
	question_id: ID
	response: Int
	weight: Int
}

input ResponseInput {
	questionId: ID
	value: ID
}

type ValuesSummary {
	average: Float
	num: Int!
	stdDev: Float

	evaluationIds: [ID]!
		@field(
			resolver: "App\\Http\\GraphQL\\Queries\\BeyondMilestonesResponseSummaries@resolveEvaluationIds"
		)
	evaluations: [Evaluation]!
		@field(
			resolver: "App\\Http\\GraphQL\\Queries\\BeyondMilestonesResponseSummaries@resolveEvaluations"
		)
}

type ResponseSummary {
	evaluations: [Evaluation]!
	responses: [Response]!
	values: [Float]!

	average: Float
		@field(
			resolver: "App\\Http\\GraphQL\\Queries\\ResponseSummary@resolveAverage"
		)
	stdDev: Float
		@field(
			resolver: "App\\Http\\GraphQL\\Queries\\ResponseSummary@resolveStdDev"
		)
	num: Int!
		@field(
			resolver: "App\\Http\\GraphQL\\Queries\\ResponseSummary@resolveNum"
		)
}

type TextResponseSummary {
	evaluations: [Evaluation]!
	responses: [TextResponse]!
	values: [String]!

	num: Int!
		@field(
			resolver: "App\\Http\\GraphQL\\Queries\\TextResponseSummary@resolveNum"
		)

	withNumericValues(mappings: [NumericValueMapping]!): ResponseSummary!
		@field(
			resolver: "App\\Http\\GraphQL\\Queries\\TextResponseSummary@resolveWithNumericValues"
		)

	withValue(value: String!): TextResponsesWithValue!
		@field(
			resolver: "App\\Http\\GraphQL\\Queries\\TextResponseSummary@resolveWithValue"
		)
}

type TextResponsesWithValue {
	value: String!
	responses: [TextResponse]!
	num: Int!
	percent: Float!
}

input NumericValueMapping {
	text: String!
	value: Float!
}

extend type Form {
	evaluations(subject_id: ID @eq): [Evaluation]! @hasMany
}
